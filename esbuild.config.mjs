import esbuild from "esbuild";
import process from "process";
import fs from "fs";

const isProduction = process.argv.includes("--production");
const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, please visit the github repository of this plugin
*/
`;

// Function to check if a file exists
const fileExists = (filePath) => {
  try {
    return fs.statSync(filePath).isFile();
  } catch (e) {
    return false;
  }
};

// Define entry points
const entryPoints = ["src/main.ts"];
if (fileExists("src/styles.css")) {
  entryPoints.push("src/styles.css");
}

const buildOptions = {
  banner: {
    js: banner,
  },
  entryPoints: entryPoints,
  bundle: true,
  external: ["obsidian"],
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: isProduction ? false : "inline",
  treeShaking: true,
  minify: isProduction,
  outdir: "build",
};

// Build or watch based on the mode
if (isProduction) {
  esbuild.build(buildOptions).catch(() => process.exit(1));
} else {
  // Development mode with watch
  esbuild.context(buildOptions).then(ctx => ctx.watch());
}

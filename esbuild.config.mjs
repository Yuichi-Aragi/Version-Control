import esbuild from "esbuild";
import process from "process";
import fs from "fs";
import { exec, execSync } from "child_process";

const isProduction = process.argv.includes("--production");
const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, please visit the github repository of this plugin
*/
`;

const fileExists = (filePath) => {
  try {
    return fs.statSync(filePath).isFile();
  } catch (e) {
    return false;
  }
};

const entryPoints = ["src/main.ts"];
if (fileExists("src/styles.css")) {
  entryPoints.push("src/styles.css");
}

const buildOptions = {
  banner: { js: banner },
  entryPoints,
  bundle: true,
  external: ["obsidian"],
  format: "cjs",
  target: "es2022",
  logLevel: "info", // We'll capture logs manually
  sourcemap: false,
  treeShaking: true,
  minify: true,
  minifyWhitespace: true,
  minifyIdentifiers: true,
  minifySyntax: true,
  outdir: "build",
};

// Function to run tsc --noEmit and log errors without halting build
function typeCheck() {
  exec("npx tsc --noEmit", (error, stdout, stderr) => {
    if (error) {
      console.error("TypeScript type errors detected:");
      console.error(stdout || stderr);
    }
  });
}

if (isProduction) {
  typeCheck();
  esbuild.build(buildOptions).catch(() => process.exit(1));
} else {
  typeCheck();
  esbuild.context(buildOptions).then(ctx => ctx.watch());
}

import esbuild from 'esbuild';
import fs from 'fs/promises';
import path from 'path';

const workerEntryPoint = 'src/workers/diff.worker.ts';
const outputStringFile = 'src/workers/diff.worker.string.ts';

async function buildWorker() {
  try {
    const result = await esbuild.build({
      entryPoints: [workerEntryPoint],
      bundle: true,
      minify: true,
      format: 'iife', // self-contained
      write: false, // output to memory
    });

    if (result.outputFiles && result.outputFiles.length > 0) {
      const workerCode = result.outputFiles[0].text;
      // Escape backticks, backslashes, and template literal placeholders
      const escapedCode = workerCode
        .replace(/\\/g, '\\\\')
        .replace(/`/g, '\\`')
        .replace(/\$\{/g, '\\${');

      const fileContent = `// This file is auto-generated by esbuild.worker.mjs. Do not edit.\nexport const diffWorkerString = \`${escapedCode}\`;\n`;
      
      // Ensure the directory exists
      await fs.mkdir(path.dirname(outputStringFile), { recursive: true });
      await fs.writeFile(outputStringFile, fileContent);
      console.log('Successfully built and embedded worker string.');
    } else {
      throw new Error('esbuild did not produce an output file for the worker.');
    }
  } catch (error) {
    console.error('Failed to build worker:', error);
    process.exit(1);
  }
}

buildWorker();

name: Build and Release

on:
  push:
    branches:
      - '**'  # Triggers on a push to ANY branch.
    paths:
      - 'manifest.json'

permissions:
  contents: write  # Needed to create releases and commit files

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Need full history to create commits/tags
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          check-latest: true

      - name: Check for package-lock.json
        id: check_lockfile
        run: |
          if [ -f package-lock.json ]; then
            echo "lockfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "lockfile_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies (npm ci or install)
        run: |
          if [ "${{ steps.check_lockfile.outputs.lockfile_exists }}" = "true" ]; then
            npm ci || npm install
          else
            npm install
          fi

      - name: Run Version Sync and Release Script
        run: |
          set +e # Temporarily disable exit on error
          node ./version-manager.mjs
          EXIT_CODE=$?
          set -e # Re-enable exit on error
          
          echo "Version manager completed with exit code $EXIT_CODE"
          # Explicitly fail the step if the script had a non-zero exit code
          if [ $EXIT_CODE -ne 0 ]; then
            exit $EXIT_CODE
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REF_NAME: ${{ github.ref_name }} # Pass branch name to the script

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Stage potential changes, ignoring errors if files don't exist
          git add versions.json package.json package-lock.json --ignore-errors
          
          # Check if there are any staged changes
          if ! git diff --staged --quiet; then
            echo "Changes detected in version files. Committing and pushing..."
            git commit -m "chore(release): Sync versions for ${{ github.sha }}"
            
            # Push the commit to the branch that triggered the workflow
            git push origin HEAD:${{ github.ref_name }}
          else
            echo "No changes to version files to commit."
          fi
